#include "fixed_order.hpp"

namespace sfem::fem::fixed_order
{
    //=============================================================================
    Quad4::Quad4()
        : NodalFiniteElement(mesh::CellType::quad, 1,
                             std::make_unique<quadrature::Gauss<2>>(1))
    {
    }
    //=============================================================================
    void Quad4::eval_shape(const std::array<real_t, 3> &pt, la::DenseMatrix &N) const
    {
        N(0, 0) = 0.25 * (1.0 - pt[0]) * (1.0 - pt[1]);
        N(1, 0) = 0.25 * (1.0 + pt[0]) * (1.0 - pt[1]);
        N(2, 0) = 0.25 * (1.0 + pt[0]) * (1.0 + pt[1]);
        N(3, 0) = 0.25 * (1.0 - pt[0]) * (1.0 + pt[1]);
    }
    //=============================================================================
    void Quad4::eval_shape_grad(const std::array<real_t, 3> &pt, la::DenseMatrix &dNdxi) const
    {
        dNdxi(0, 0) = -0.25 * (1.0 - pt[1]);
        dNdxi(0, 1) = -0.25 * (1.0 - pt[0]);

        dNdxi(1, 0) = 0.25 * (1.0 - pt[1]);
        dNdxi(1, 1) = -0.25 * (1.0 + pt[0]);

        dNdxi(2, 0) = 0.25 * (1.0 + pt[1]);
        dNdxi(2, 1) = 0.25 * (1.0 + pt[0]);

        dNdxi(3, 0) = -0.25 * (1.0 + pt[1]);
        dNdxi(3, 1) = 0.25 * (1.0 - pt[0]);
    }
    //=============================================================================
    Quad9::Quad9()
        : NodalFiniteElement(mesh::CellType::quad, 2,
                             std::make_unique<quadrature::Gauss<2>>(2))
    {
    }
    //=============================================================================
    void Quad9::eval_shape(const std::array<real_t, 3> &pt, la::DenseMatrix &N) const
    {
        // Corner nodes
        N(0, 0) = 0.25 * (1 - pt[0]) * (1 - pt[1]) * pt[0] * pt[1];
        N(1, 0) = -0.25 * (1 + pt[0]) * (1 - pt[1]) * pt[0] * pt[1];
        N(2, 0) = 0.25 * (1 + pt[0]) * (1 + pt[1]) * pt[0] * pt[1];
        N(3, 0) = -0.25 * (1 - pt[0]) * (1 + pt[1]) * pt[0] * pt[1];

        // Edge nodes
        N(4, 0) = -0.5 * (1 - pt[0] * pt[0]) * (1 - pt[1]) * pt[1];
        N(5, 0) = 0.5 * (1 + pt[0]) * (1 - pt[1] * pt[1]) * pt[0];
        N(6, 0) = 0.5 * (1 - pt[0] * pt[0]) * (1 + pt[1]) * pt[1];
        N(7, 0) = -0.5 * (1 - pt[0]) * (1 - pt[1] * pt[1]) * pt[0];

        // Interior node
        N(8, 0) = (1 - pt[0] * pt[0]) * (1 - pt[1] * pt[1]);
    }
    //=============================================================================
    void Quad9::eval_shape_grad(const std::array<real_t, 3> &pt, la::DenseMatrix &dNdxi) const
    {
        // Corner nodes
        dNdxi(0, 0) = 0.25 * pt[1] * (pt[1] - 1) * (2 * pt[0] - 1);
        dNdxi(0, 1) = 0.25 * pt[0] * (2 * pt[1] - 1) * (pt[0] - 1);

        dNdxi(1, 0) = 0.25 * pt[1] * (pt[1] - 1) * (2 * pt[0] + 1);
        dNdxi(1, 1) = 0.25 * pt[0] * (2 * pt[1] - 1) * (pt[0] + 1);

        dNdxi(2, 0) = 0.25 * pt[1] * (pt[1] + 1) * (2 * pt[0] + 1);
        dNdxi(2, 1) = 0.25 * pt[0] * (2 * pt[1] + 1) * (pt[0] + 1);

        dNdxi(3, 0) = 0.25 * pt[1] * (pt[1] + 1) * (2 * pt[0] - 1);
        dNdxi(3, 1) = 0.25 * pt[0] * (2 * pt[1] + 1) * (pt[0] - 1);

        // Edge nodes
        dNdxi(4, 0) = 1.0 * pt[1] * pt[0] * (1 - pt[1]);
        dNdxi(4, 1) = 0.5 * (1 - 2 * pt[1]) * (pt[0] * pt[0] - 1);

        dNdxi(5, 0) = -0.5 * (pt[1] * pt[1] - 1) * (2 * pt[0] + 1);
        dNdxi(5, 1) = -1.0 * pt[1] * pt[0] * (pt[0] + 1);

        dNdxi(6, 0) = -1.0 * pt[1] * pt[0] * (pt[1] + 1);
        dNdxi(6, 1) = -0.5 * (2 * pt[1] + 1) * (pt[0] * pt[0] - 1);

        dNdxi(7, 0) = 0.5 * (1 - 2 * pt[0]) * (pt[1] * pt[1] - 1);
        dNdxi(7, 1) = 1.0 * pt[1] * pt[0] * (1 - pt[0]);

        // Interior node
        dNdxi(8, 0) = 2 * pt[0] * (pt[1] * pt[1] - 1);
        dNdxi(8, 1) = 2 * pt[1] * (pt[0] * pt[0] - 1);
    }
    //=============================================================================
    Quad16::Quad16()
        : NodalFiniteElement(mesh::CellType::quad, 3,
                             std::make_unique<quadrature::Gauss<2>>(3))
    {
    }
    //=============================================================================
    void Quad16::eval_shape(const std::array<real_t, 3> &pt, la::DenseMatrix &N) const
    {
        // Corner nodes
        N(0, 0) = (0.111111111111111 - pt[1] * pt[1]) * (0.111111111111111 - pt[0] * pt[0]) * (0.31640625 - 0.31640625 * pt[0]) * (1 - pt[1]);
        N(1, 0) = (0.111111111111111 - pt[1] * pt[1]) * (0.111111111111111 - pt[0] * pt[0]) * (1 - pt[1]) * (0.31640625 * pt[0] + 0.31640625);
        N(2, 0) = (0.111111111111111 - pt[1] * pt[1]) * (0.111111111111111 - pt[0] * pt[0]) * (pt[1] + 1) * (0.31640625 * pt[0] + 0.31640625);
        N(3, 0) = (0.111111111111111 - pt[1] * pt[1]) * (0.111111111111111 - pt[0] * pt[0]) * (0.31640625 - 0.31640625 * pt[0]) * (pt[1] + 1);

        // Edge nodes
        N(4, 0) = (0.333333333333333 - 1.0 * pt[0]) * (0.94921875 - 0.94921875 * pt[0] * pt[0]) * (1 - pt[1]) * (pt[1] * pt[1] - 0.111111111111111);
        N(5, 0) = (0.94921875 - 0.94921875 * pt[0] * pt[0]) * (1 - pt[1]) * (pt[1] * pt[1] - 0.111111111111111) * (1.0 * pt[0] + 0.333333333333333);
        N(6, 0) = (0.333333333333333 - 1.0 * pt[1]) * (0.94921875 - 0.94921875 * pt[1] * pt[1]) * (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111);
        N(7, 0) = (0.94921875 - 0.94921875 * pt[1] * pt[1]) * (1.0 * pt[1] + 0.333333333333333) * (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111);
        N(8, 0) = (0.94921875 - 0.94921875 * pt[0] * pt[0]) * (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (1.0 * pt[0] + 0.333333333333333);
        N(9, 0) = (0.333333333333333 - 1.0 * pt[0]) * (0.94921875 - 0.94921875 * pt[0] * pt[0]) * (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111);
        N(10, 0) = (0.94921875 - 0.94921875 * pt[1] * pt[1]) * (1 - pt[0]) * (1.0 * pt[1] + 0.333333333333333) * (pt[0] * pt[0] - 0.111111111111111);
        N(11, 0) = (0.333333333333333 - 1.0 * pt[1]) * (0.94921875 - 0.94921875 * pt[1] * pt[1]) * (1 - pt[0]) * (pt[0] * pt[0] - 0.111111111111111);

        // Interior nodes
        N(12, 0) = (0.333333333333333 - 1.0 * pt[1]) * (0.333333333333333 - 1.0 * pt[0]) * (1 - pt[1] * pt[1]) * (2.84765625 - 2.84765625 * pt[0] * pt[0]);
        N(13, 0) = (0.333333333333333 - 1.0 * pt[1]) * (1 - pt[1] * pt[1]) * (2.84765625 - 2.84765625 * pt[0] * pt[0]) * (1.0 * pt[0] + 0.333333333333333);
        N(14, 0) = (0.333333333333333 - 1.0 * pt[0]) * (1 - pt[1] * pt[1]) * (2.84765625 - 2.84765625 * pt[0] * pt[0]) * (1.0 * pt[1] + 0.333333333333333);
        N(15, 0) = (1 - pt[1] * pt[1]) * (2.84765625 - 2.84765625 * pt[0] * pt[0]) * (1.0 * pt[1] + 0.333333333333333) * (1.0 * pt[0] + 0.333333333333333);
    }
    //=============================================================================
    void Quad16::eval_shape_grad(const std::array<real_t, 3> &pt, la::DenseMatrix &dNdxi) const
    {
        // Corner nodes
        dNdxi(0, 0) = (pt[1] - 1) * (pt[1] * pt[1] - 0.111111111111111) * (0.31640625 * pt[0] * pt[0] + 0.6328125 * pt[0] * (pt[0] - 1) - 0.03515625);
        dNdxi(0, 1) = (pt[0] - 1) * (pt[0] * pt[0] - 0.111111111111111) * (0.31640625 * pt[1] * pt[1] + 0.6328125 * pt[1] * (pt[1] - 1) - 0.03515625);

        dNdxi(1, 0) = (pt[1] - 1) * (pt[1] * pt[1] - 0.111111111111111) * (-0.31640625 * pt[0] * pt[0] - 0.6328125 * pt[0] * (pt[0] + 1) + 0.03515625);
        dNdxi(1, 1) = (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111) * (-0.31640625 * pt[1] * pt[1] - 0.6328125 * pt[1] * (pt[1] - 1) + 0.03515625);

        dNdxi(2, 0) = (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (0.31640625 * pt[0] * pt[0] + 0.6328125 * pt[0] * (pt[0] + 1) - 0.03515625);
        dNdxi(2, 1) = (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111) * (0.31640625 * pt[1] * pt[1] + 0.6328125 * pt[1] * (pt[1] + 1) - 0.03515625);

        dNdxi(3, 0) = (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (-0.31640625 * pt[0] * pt[0] - 0.6328125 * pt[0] * (pt[0] - 1) + 0.03515625);
        dNdxi(3, 1) = (pt[0] - 1) * (pt[0] * pt[0] - 0.111111111111111) * (-0.31640625 * pt[1] * pt[1] - 0.6328125 * pt[1] * (pt[1] + 1) + 0.03515625);

        // Edge nodes
        dNdxi(4, 0) = (pt[1] - 1) * (pt[1] * pt[1] - 0.111111111111111) * (-0.94921875 * pt[0] * pt[0] - 1.8984375 * pt[0] * (1.0 * pt[0] - 0.333333333333333) + 0.94921875);
        dNdxi(4, 1) = (1.0 * pt[0] - 0.333333333333333) * (pt[0] * pt[0] - 1) * (-0.94921875 * pt[1] * pt[1] - 1.8984375 * pt[1] * (pt[1] - 1) + 0.10546875);

        dNdxi(5, 0) = (pt[1] - 1) * (pt[1] * pt[1] - 0.111111111111111) * (0.94921875 * pt[0] * pt[0] + 1.8984375 * pt[0] * (1.0 * pt[0] + 0.333333333333333) - 0.94921875);
        dNdxi(5, 1) = (1.0 * pt[0] + 0.333333333333333) * (pt[0] * pt[0] - 1) * (0.94921875 * pt[1] * pt[1] + 1.8984375 * pt[1] * (pt[1] - 1) - 0.10546875);

        dNdxi(6, 0) = (1.0 * pt[1] - 0.333333333333333) * (pt[1] * pt[1] - 1) * (0.94921875 * pt[0] * pt[0] + 1.8984375 * pt[0] * (pt[0] + 1) - 0.10546875);
        dNdxi(6, 1) = (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111) * (0.94921875 * pt[1] * pt[1] + 1.8984375 * pt[1] * (1.0 * pt[1] - 0.333333333333333) - 0.94921875);

        dNdxi(7, 0) = (1.0 * pt[1] + 0.333333333333333) * (pt[1] * pt[1] - 1) * (-0.94921875 * pt[0] * pt[0] - 1.8984375 * pt[0] * (pt[0] + 1) + 0.10546875);
        dNdxi(7, 1) = (pt[0] + 1) * (pt[0] * pt[0] - 0.111111111111111) * (-0.94921875 * pt[1] * pt[1] - 1.8984375 * pt[1] * (1.0 * pt[1] + 0.333333333333333) + 0.94921875);

        dNdxi(8, 0) = (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (-0.94921875 * pt[0] * pt[0] - 1.8984375 * pt[0] * (1.0 * pt[0] + 0.333333333333333) + 0.94921875);
        dNdxi(8, 1) = (1.0 * pt[0] + 0.333333333333333) * (pt[0] * pt[0] - 1) * (-0.94921875 * pt[1] * pt[1] - 1.8984375 * pt[1] * (pt[1] + 1) + 0.10546875);

        dNdxi(9, 0) = (pt[1] + 1) * (pt[1] * pt[1] - 0.111111111111111) * (0.94921875 * pt[0] * pt[0] + 1.8984375 * pt[0] * (1.0 * pt[0] - 0.333333333333333) - 0.94921875);
        dNdxi(9, 1) = (1.0 * pt[0] - 0.333333333333333) * (pt[0] * pt[0] - 1) * (0.94921875 * pt[1] * pt[1] + 1.8984375 * pt[1] * (pt[1] + 1) - 0.10546875);

        dNdxi(10, 0) = (1.0 * pt[1] + 0.333333333333333) * (pt[1] * pt[1] - 1) * (0.94921875 * pt[0] * pt[0] + 1.8984375 * pt[0] * (pt[0] - 1) - 0.10546875);
        dNdxi(10, 1) = (pt[0] - 1) * (pt[0] * pt[0] - 0.111111111111111) * (0.94921875 * pt[1] * pt[1] + 1.8984375 * pt[1] * (1.0 * pt[1] + 0.333333333333333) - 0.94921875);

        dNdxi(11, 0) = (1.0 * pt[1] - 0.333333333333333) * (pt[1] * pt[1] - 1) * (-0.94921875 * pt[0] * pt[0] - 1.8984375 * pt[0] * (pt[0] - 1) + 0.10546875);
        dNdxi(11, 1) = (pt[0] - 1) * (pt[0] * pt[0] - 0.111111111111111) * (-0.94921875 * pt[1] * pt[1] - 1.8984375 * pt[1] * (1.0 * pt[1] - 0.333333333333333) + 0.94921875);

        // Interior nodes
        dNdxi(12, 0) = (1.0 * pt[1] - 0.333333333333333) * (pt[1] * pt[1] - 1) * (2.84765625 * pt[0] * pt[0] + 5.6953125 * pt[0] * (1.0 * pt[0] - 0.333333333333333) - 2.84765625);
        dNdxi(12, 1) = (1.0 * pt[0] - 0.333333333333333) * (pt[0] * pt[0] - 1) * (2.84765625 * pt[1] * pt[1] + 5.6953125 * pt[1] * (1.0 * pt[1] - 0.333333333333333) - 2.84765625);

        dNdxi(13, 0) = (1.0 * pt[1] - 0.333333333333333) * (pt[1] * pt[1] - 1) * (-2.84765625 * pt[0] * pt[0] - 5.6953125 * pt[0] * (1.0 * pt[0] + 0.333333333333333) + 2.84765625);
        dNdxi(13, 1) = (1.0 * pt[0] + 0.333333333333333) * (pt[0] * pt[0] - 1) * (-2.84765625 * pt[1] * pt[1] - 5.6953125 * pt[1] * (1.0 * pt[1] - 0.333333333333333) + 2.84765625);

        dNdxi(14, 0) = (1.0 * pt[1] + 0.333333333333333) * (pt[1] * pt[1] - 1) * (-2.84765625 * pt[0] * pt[0] - 5.6953125 * pt[0] * (1.0 * pt[0] - 0.333333333333333) + 2.84765625);
        dNdxi(14, 1) = (1.0 * pt[0] - 0.333333333333333) * (pt[0] * pt[0] - 1) * (-2.84765625 * pt[1] * pt[1] - 5.6953125 * pt[1] * (1.0 * pt[1] + 0.333333333333333) + 2.84765625);

        dNdxi(15, 0) = (1.0 * pt[1] + 0.333333333333333) * (pt[1] * pt[1] - 1) * (2.84765625 * pt[0] * pt[0] + 5.6953125 * pt[0] * (1.0 * pt[0] + 0.333333333333333) - 2.84765625);
        dNdxi(15, 1) = (1.0 * pt[0] + 0.333333333333333) * (pt[0] * pt[0] - 1) * (2.84765625 * pt[1] * pt[1] + 5.6953125 * pt[1] * (1.0 * pt[1] + 0.333333333333333) - 2.84765625);
    }
}