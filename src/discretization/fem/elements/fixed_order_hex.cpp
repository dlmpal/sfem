#include "fixed_order.hpp"

namespace sfem::fem::fixed_order
{
    //=============================================================================
    Hex8::Hex8()
        : NodalFiniteElement(mesh::CellType::hex, 1,
                             std::make_unique<quadrature::Gauss<3>>(1))
    {
    }
    //=============================================================================
    void Hex8::eval_shape(const std::array<real_t, 3> &pt, la::DenseMatrix &N) const
    {
        N(0, 0) = (0.125 - 0.125 * pt[0]) * (1 - pt[1]) * (1 - pt[2]);
        N(1, 0) = (1 - pt[1]) * (1 - pt[2]) * (0.125 * pt[0] + 0.125);
        N(2, 0) = (1 - pt[2]) * (pt[1] + 1) * (0.125 * pt[0] + 0.125);
        N(3, 0) = (0.125 - 0.125 * pt[0]) * (1 - pt[2]) * (pt[1] + 1);
        N(4, 0) = (0.125 - 0.125 * pt[0]) * (1 - pt[1]) * (pt[2] + 1);
        N(5, 0) = (1 - pt[1]) * (0.125 * pt[0] + 0.125) * (pt[2] + 1);
        N(6, 0) = (pt[1] + 1) * (0.125 * pt[0] + 0.125) * (pt[2] + 1);
        N(7, 0) = (0.125 - 0.125 * pt[0]) * (pt[1] + 1) * (pt[2] + 1);
    }
    //=============================================================================
    void Hex8::eval_shape_grad(const std::array<real_t, 3> &pt, la::DenseMatrix &dNdxi) const
    {
        dNdxi(0, 0) = -0.125 * (pt[1] - 1) * (pt[2] - 1);
        dNdxi(0, 1) = -0.125 * (pt[0] - 1) * (pt[2] - 1);
        dNdxi(0, 2) = -0.125 * (pt[1] - 1) * (pt[0] - 1);

        dNdxi(1, 0) = 0.125 * (pt[1] - 1) * (pt[2] - 1);
        dNdxi(1, 1) = 0.125 * (pt[0] + 1) * (pt[2] - 1);
        dNdxi(1, 2) = 0.125 * (pt[1] - 1) * (pt[0] + 1);

        dNdxi(2, 0) = -0.125 * (pt[1] + 1) * (pt[2] - 1);
        dNdxi(2, 1) = -0.125 * (pt[0] + 1) * (pt[2] - 1);
        dNdxi(2, 2) = -0.125 * (pt[1] + 1) * (pt[0] + 1);

        dNdxi(3, 0) = 0.125 * (pt[1] + 1) * (pt[2] - 1);
        dNdxi(3, 1) = 0.125 * (pt[0] - 1) * (pt[2] - 1);
        dNdxi(3, 2) = 0.125 * (pt[1] + 1) * (pt[0] - 1);

        dNdxi(4, 0) = 0.125 * (pt[1] - 1) * (pt[2] + 1);
        dNdxi(4, 1) = 0.125 * (pt[0] - 1) * (pt[2] + 1);
        dNdxi(4, 2) = 0.125 * (pt[1] - 1) * (pt[0] - 1);

        dNdxi(5, 0) = -0.125 * (pt[1] - 1) * (pt[2] + 1);
        dNdxi(5, 1) = -0.125 * (pt[0] + 1) * (pt[2] + 1);
        dNdxi(5, 2) = -0.125 * (pt[1] - 1) * (pt[0] + 1);

        dNdxi(6, 0) = 0.125 * (pt[1] + 1) * (pt[2] + 1);
        dNdxi(6, 1) = 0.125 * (pt[0] + 1) * (pt[2] + 1);
        dNdxi(6, 2) = 0.125 * (pt[1] + 1) * (pt[0] + 1);

        dNdxi(7, 0) = -0.125 * (pt[1] + 1) * (pt[2] + 1);
        dNdxi(7, 1) = -0.125 * (pt[0] - 1) * (pt[2] + 1);
        dNdxi(7, 2) = -0.125 * (pt[1] + 1) * (pt[0] - 1);
    }
}